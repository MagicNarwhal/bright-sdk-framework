#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef BRDSDK_SWIFT_H
#define BRDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <brdsdk/brdsdk.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="brdsdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


/// Status of user’s consent with SDK conditions.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIChoice, "Choice", open) {
/// User hasn’t done his choice.
  BrightAPIChoiceNone = 0,
/// User has agreed with SDK conditions.
  BrightAPIChoicePeer = 1,
/// User has disagreed with SDK conditions.
  BrightAPIChoiceNotPeer = 2,
};

/// A place from where opt-in or opt-out called.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIChoiceTriggerType, "ChoiceTriggerType", open) {
/// Indicates a call from consent screen.
  BrightAPIChoiceTriggerTypeConsent = 0,
/// Indicates a call from settings (eg: Web Indexing check box) or other place.
  BrightAPIChoiceTriggerTypeManual = 1,
};

@class UIColor;

/// The settings for the consent screen
SWIFT_CLASS("_TtC6brdsdk13ColorSettings")
@interface ColorSettings : NSObject
/// Creates instance with passed color values.
/// \param background_color Consent window background color.
///
/// \param title_color Color for consent’s title.
///
/// \param consent_text_color Color for consent’s main message texts.
///
/// \param consent_links_color Color for consent’s main message links.
///
/// \param privacy_text_color Color for consent’s privacy and license message texts.
///
/// \param privacy_links_color Color for consent’s privacy and license message links.
///
/// \param qr_foreground_color Foreground color for consent’s qr code. Appliable to tvOS.
///
/// \param qr_background_color Background color for consent’s qr code. Appliable to tvOS.
///
/// \param icons_foreground_color Foreground color for consent’s icons.
///
/// \param icons_background_color Background color for consent’s icons.
///
- (nonnull instancetype)initWithBackground_color:(UIColor * _Nullable)background_color title_color:(UIColor * _Nullable)title_color consent_text_color:(UIColor * _Nullable)consent_text_color consent_links_color:(UIColor * _Nullable)consent_links_color privacy_text_color:(UIColor * _Nullable)privacy_text_color privacy_links_color:(UIColor * _Nullable)privacy_links_color qr_foreground_color:(UIColor * _Nullable)qr_foreground_color qr_background_color:(UIColor * _Nullable)qr_background_color icons_foreground_color:(UIColor * _Nullable)icons_foreground_color icons_background_color:(UIColor * _Nullable)icons_background_color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIImage;
@class NSString;
@class NSBundle;

/// Meta information of images for sdk consent action
SWIFT_CLASS("_TtC6brdsdk17ConsentActionInfo")
@interface ConsentActionInfo : NSObject
/// Image for button’s background. If nil button’s background color will be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable backgroundImage;
/// Image for button’s title. If nil button’s title will be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable textImage;
/// Background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Color of text.
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates meta structure for a consent button with created images and colors.
/// \param backgroundImage Image for button’s background. If nil button’s background color will be used.
///
/// \param textImage Image for button’s title. If nil button’s title will be used.
///
/// \param backgroundColor Background color.
///
/// \param textColor Button’s text color.
///
- (nonnull instancetype)initWithBackgroundImage:(UIImage * _Nullable)backgroundImage textImage:(UIImage * _Nullable)textImage backgroundColor:(UIColor * _Nullable)backgroundColor textColor:(UIColor * _Nullable)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates meta structure for a consent button by using image names in bundle assets and nil colors.
/// \param backgroundName Name of background image in xcassets. The image is for button’s background.
/// If nil button’s background color will be used
///
/// \param textName Name of text image in xcassets. The image for button’s title. If nil button’s title will be used.
///
/// \param bundle Bundle where xsassets placed
///
- (nonnull instancetype)initWithBackgroundName:(NSString * _Nullable)backgroundName textName:(NSString * _Nullable)textName in:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Meta information about a consent screen background image
SWIFT_CLASS("_TtC6brdsdk22ConsentBackgroundImage")
@interface ConsentBackgroundImage : NSObject
/// Image for portrait orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull portrait;
/// Image for landscape orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull landscape;
/// Scale mode for image view
@property (nonatomic, readonly) UIViewContentMode scaleMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates meta structure with passed params
/// \param portrait Image for portrait orientation
///
/// \param landscape Image for landscape orientation. If nil, portrait will be used
///
/// \param scaleMode Scale mode for image view. Desirable to use fit or fill values
///
- (nonnull instancetype)initWithPortrait:(UIImage * _Nonnull)portrait landscape:(UIImage * _Nullable)landscape scaleMode:(UIViewContentMode)scaleMode OBJC_DESIGNATED_INITIALIZER;
/// Creates meta structure by using image names in bundle assets
/// \param portraitName Name of portrait image in xcassets
///
/// \param landscapeName Name of landscape image in xcassets. If nil, portrait will be used
///
/// \param scaleMode Scale mode for image view. Desirable to use fit or fill values
///
/// \param bundle Bundle where xsassets placed
///
- (nullable instancetype)initWithPortraitName:(NSString * _Nonnull)portraitName landscapeName:(NSString * _Nullable)landscapeName scaleMode:(UIViewContentMode)scaleMode in:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIFont;

/// Contains fonts that overrides default fonts of the SDK’s consent screen.
SWIFT_CLASS("_TtC6brdsdk16ConsentFontsInfo")
@interface ConsentFontsInfo : NSObject
/// Empty instance with nil font values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConsentFontsInfo * _Nonnull empty;)
+ (ConsentFontsInfo * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitleText:(UIFont * _Nullable)titleText mainText:(UIFont * _Nullable)mainText licenseText:(UIFont * _Nullable)licenseText iconsText:(UIFont * _Nullable)iconsText buttonsText:(UIFont * _Nullable)buttonsText OBJC_DESIGNATED_INITIALIZER;
/// Overrides font for the consent’s title by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setTitleTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s main text by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setMainTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s license (EULA, Privacy Politics) text by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setLicenseTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s icons texts by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setIconsTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s buttons by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setButtonsTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The presentation style for SDK’s consent screen.
/// Presentation style defines how the system presents a modal view controller.
/// The system uses this value only in regular-width size classes. In compact-width size classes, some styles take on the behavior of other styles.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIConsentPresentationStyle, "ConsentPresentationStyle", open) {
/// Default SDK’s consent screen presentation style for current device and platform.
  BrightAPIConsentPresentationStyleDefault = 0,
/// A presentation style that partially covers the underlying content.
  BrightAPIConsentPresentationStylePageSheet = 1,
/// A presentation style that displays the content centered in the screen.
  BrightAPIConsentPresentationStyleFormSheet = 2,
/// A presentation style in which the presented view covers the screen.
/// The views belonging to the presenting view controller are removed after the presentation completes.
  BrightAPIConsentPresentationStyleFullScreen = 100,
/// A view presentation style in which the presented view covers the screen.
/// The views beneath the presented content are not removed from the view hierarchy when the presentation finishes.
/// So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.
  BrightAPIConsentPresentationStyleOverFullScreen = 101,
};








enum BrightAPIAuthorizationStatus : NSInteger;

SWIFT_EXTERN enum BrightAPIAuthorizationStatus brdSDK_AuthorizeDevice(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN enum BrightAPIChoice brdSDK_CurrentChoice(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN NSInteger brdSDK_ExternalOptIn(enum BrightAPIChoiceTriggerType trigger) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN char const * _Nullable brdSDK_GetUUID(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_NotifyConsentShown(void) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_OptOut(enum BrightAPIChoiceTriggerType trigger) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnChoiceChangeCallback(void (* _Nonnull callback)(enum BrightAPIChoice)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnConsentClosedCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnConsentPresentedCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnReadyCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN BOOL brdSDK_ShowConsent(char const * _Nullable _benefit, char const * _Nullable _agreeTitle, char const * _Nullable _disagreeTitle, char const * _Nullable _language, enum BrightAPIConsentPresentationStyle presentationStyle) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN NSInteger brdSDK_StaticInit(char const * _Nullable benefit, char const * _Nullable agreeTitle, char const * _Nullable disagreeTitle, char const * _Nullable optInInstructions, char const * _Nullable appIcon, char const * _Nullable language, BOOL skipConsent, _ConsentColors const * _Nullable consentColors, _ConsentImageMeta const * _Nullable backgroundImage, _ConsentActionMeta const * _Nullable optInInfo, _ConsentActionMeta const * _Nullable optOutInfo, _ConsentFontsInfo const * _Nullable fonts, char const * _Nullable campaign) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN char const * _Nonnull brdSDK_Version(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);

@class NSLocale;
@class NSURL;

SWIFT_CLASS("_TtC6brdsdk7brd_api") SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api : NSObject
/// Handler when consent did present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onConsentPresented)(void);)
+ (void (^ _Nullable)(void))onConsentPresented SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnConsentPresented:(void (^ _Nullable)(void))value;
/// Handler when consent was dismissed by close button or agree/disagree buttons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onConsentClosed)(void);)
+ (void (^ _Nullable)(void))onConsentClosed SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnConsentClosed:(void (^ _Nullable)(void))value;
/// Handler for the event when SDK is configured and ready.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onSDKReady)(void);)
+ (void (^ _Nullable)(void))onSDKReady SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnSDKReady:(void (^ _Nullable)(void))value;
/// Handler for the choice chaning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onChoiceChange)(enum BrightAPIChoice);)
+ (void (^ _Nullable)(enum BrightAPIChoice))onChoiceChange SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnChoiceChange:(void (^ _Nullable)(enum BrightAPIChoice))value;
/// Language of the consent screen.
/// Set this property to an appropriate locale with language identifier for consent screen or nil if need default language.
/// seealso:
/// <a href="doc:brd_api/supportedLanguages()">doc:brd_api/supportedLanguages()</a>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSLocale * _Nullable currentLanguage;)
+ (NSLocale * _Nullable)currentLanguage SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentLanguage:(NSLocale * _Nullable)value;
/// Returns current user’s consent status.
/// seealso:
/// <code>Choice</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BrightAPIChoice currentChoice;)
+ (enum BrightAPIChoice)currentChoice SWIFT_WARN_UNUSED_RESULT;
/// BrightSDK version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves current sdk uuid value.
///
/// returns:
/// Nil in case sdk is not initialized, or stored uuid value
+ (NSString * _Nullable)get_uuid SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of available languages in SDK.
+ (NSArray<NSLocale *> * _Nonnull)supportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Initializes the SDK.
/// Should be called at the app init. All other methods will be accessible after successful initialization
/// \param benefit the text which is used in the consent screen as a prefix: “<benefit>,
/// allow Bright Data to use your device’s free resources and IP address to download…”.
/// If the parameter is not provided, then “To support <app_name>” is used by default,
/// i.g. “To support My Sample App, allow Bright Data to use your device’s free resources
/// and IP address to download…”
///
/// \param agree_btn consent screen “agree” button text. Default value: “I Agree”.
///
/// \param disagree_btn consent screen “disagree” button text. Default value: “I Disagree”.
///
/// \param language language of SDK’s consent screen. To get the list of supported by SDK language locales
/// use <a href="doc:brd_api/supportedLanguages()">doc:brd_api/supportedLanguages()</a> method.
///
/// \param colors the color settings for the text, buttons and background
///
/// \param skip_consent can be passed to skip showing the consent screen on the initialization of the API.
/// The consent screen can be shown later with the show_consent method.
///
/// \param background_image set of background images of the consent screen
///
/// \param opt_in_info Meta information for the opt-in button
///
/// \param opt_out_info Meta information for the opt-out button
///
/// \param opt_out_instructions Instructions of how to opt-out
///
/// \param appicon Icon image on the consent screen
///
/// \param fonts Details for fonts of the consent screen
///
/// \param campaign Name of campaign
///
- (nullable instancetype)initWithBenefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn opt_out_instructions:(NSString * _Nullable)opt_out_instructions appicon:(UIImage * _Nullable)appicon cwd:(NSURL * _Nullable)_cwd sys_app_id:(NSString * _Nullable)sys_app_id language:(NSString * _Nullable)language colors:(ColorSettings * _Nullable)colors background_image:(ConsentBackgroundImage * _Nullable)background_image opt_in_info:(ConsentActionInfo * _Nullable)opt_in_info opt_out_info:(ConsentActionInfo * _Nullable)opt_out_info fonts:(ConsentFontsInfo * _Nullable)fonts skip_consent:(BOOL)skip_consent campaign:(NSString * _Nullable)campaign error:(NSError * _Nullable * _Nullable)error;
/// Disables SDK.
/// \param triggerType Place type from where it called. Default value is <code>ChoiceTriggerType/consent</code>.
///
+ (void)optOutFrom:(enum BrightAPIChoiceTriggerType)triggerType;
/// Indicates a user has agreed with consent conditions and starts SDK processes.
/// This method checks authorization status to determine the possibility of the operation.
/// \param triggerType Place type from where it called. Default value is <code>ChoiceTriggerType/consent</code>.
///
///
/// throws:
/// <a href="doc:brd_api/api_error">doc:brd_api/api_error</a>
+ (BOOL)externalOptInFrom:(enum BrightAPIChoiceTriggerType)triggerType error:(NSError * _Nullable * _Nullable)error;
/// Triggers post actions when custom consent screen was shown.
/// When you implement a custom consent screen you must call this method when the screen is presented in, for example, <em>viewDidAppear</em>.
+ (void)notifyConsentShown;
/// Checks availability of running sdk on the device. It allows you to determine what you are able to do with sdk.
/// You should check the status and decide your reaction on it before showing your custom consent screen.
/// Example:
/// \code
/// let api = try brd_api(...)
/// ...
/// let authStatus = brd_api.authorizeDevice()
/// switch authStatus {
///     case .sdkNotInitialized: break // you have to initialize sdk before
///     case .parentControlEnabled: break // you cannot use sdk when parent control on a device is enabled
///     case .authorized:
///         if Feature.customConsent {
///             // show your own consent screen
///         } else {
///             // show sdk's consent screen
///         }
/// }
///
/// \endcodeattention:
/// This method is required to call when you attempt to use your own consent screen. In the other case it’s optional.
///
/// returns:
/// Authorization status
+ (enum BrightAPIAuthorizationStatus)authorizeDevice SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Result of checks of availability of using SDK
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIAuthorizationStatus, "AuthorizationStatus", open) {
/// Indicates that you are able to use SDK in both cases: either with SDK’s consent screen or with your own one
  BrightAPIAuthorizationStatusAuthorized = 0,
/// Indicates that SDK is not initialized
  BrightAPIAuthorizationStatusSdkNotInitialized = -1,
/// Indicates that parent control is enabled and you don’t have to use SDK
  BrightAPIAuthorizationStatusParentControlEnabled = -2,
};
static NSString * _Nonnull const BrightAPIAuthorizationStatusDomain = @"brdsdk.brd_api.AuthorizationStatus";




SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api (SWIFT_EXTENSION(brdsdk))
- (nullable instancetype)initWithBenefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn opt_out_instructions:(NSString * _Nullable)opt_out_instructions appicon:(UIImage * _Nullable)appicon cwd:(NSURL * _Nullable)_cwd sys_app_id:(NSString * _Nullable)sys_app_id language:(NSString * _Nullable)language colors:(ColorSettings * _Nullable)colors background_image:(ConsentBackgroundImage * _Nullable)background_image opt_in_info:(ConsentActionInfo * _Nullable)opt_in_info opt_out_info:(ConsentActionInfo * _Nullable)opt_out_info fonts:(ConsentFontsInfo * _Nullable)fonts skip_consent:(BOOL)skip_consent campaign:(NSString * _Nullable)campaign error:(NSError * _Nullable * _Nullable)error on_choice_change:(void (^ _Nullable)(NSInteger))on_choice_change SWIFT_DEPRECATED_MSG("Use other constructor without choice-change callback.");
+ (void)clear_choice SWIFT_DEPRECATED_MSG("This method will be removed in a future version.");
@end

@class UIViewController;

SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api (SWIFT_EXTENSION(brdsdk))
/// Shows the consent on the user’s action.
/// This can be used when a user tries to close an ad or clicks the checkbox in Settings screen
/// to activate Bright SDK. Result of consent will be notified via <code>brd_api/onChoiceChange</code>
/// callback from sdk initializer.
///
/// returns:
/// true if  sdk is initialized and child control disabled
+ (BOOL)show_consent:(UIViewController * _Nullable)parent benefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn language:(NSString * _Nullable)language presentationStyle:(enum BrightAPIConsentPresentationStyle)presentationStyle;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef BRDSDK_SWIFT_H
#define BRDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <brdsdk/brdsdk.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="brdsdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


/// Status of user’s consent with SDK conditions.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIChoice, "Choice", open) {
/// User hasn’t done his choice.
  BrightAPIChoiceNone = 0,
/// User has agreed with SDK conditions.
  BrightAPIChoicePeer = 1,
/// User has disagreed with SDK conditions.
  BrightAPIChoiceNotPeer = 2,
};

/// A place from where opt-in or opt-out called.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIChoiceTriggerType, "ChoiceTriggerType", open) {
/// Indicates a call from consent screen.
  BrightAPIChoiceTriggerTypeConsent = 0,
/// Indicates a call from settings (eg: Web Indexing check box) or other place.
  BrightAPIChoiceTriggerTypeManual = 1,
};

@class UIColor;

/// The settings for the consent screen
SWIFT_CLASS("_TtC6brdsdk13ColorSettings")
@interface ColorSettings : NSObject
/// Creates instance with passed color values.
/// \param background_color Consent window background color.
///
/// \param title_color Color for consent’s title.
///
/// \param consent_text_color Color for consent’s main message texts.
///
/// \param consent_links_color Color for consent’s main message links.
///
/// \param privacy_text_color Color for consent’s privacy and license message texts.
///
/// \param privacy_links_color Color for consent’s privacy and license message links.
///
/// \param qr_foreground_color Foreground color for consent’s qr code. Appliable to tvOS.
///
/// \param qr_background_color Background color for consent’s qr code. Appliable to tvOS.
///
/// \param icons_foreground_color Foreground color for consent’s icons.
///
/// \param icons_background_color Background color for consent’s icons.
///
- (nonnull instancetype)initWithBackground_color:(UIColor * _Nullable)background_color title_color:(UIColor * _Nullable)title_color consent_text_color:(UIColor * _Nullable)consent_text_color consent_links_color:(UIColor * _Nullable)consent_links_color privacy_text_color:(UIColor * _Nullable)privacy_text_color privacy_links_color:(UIColor * _Nullable)privacy_links_color qr_foreground_color:(UIColor * _Nullable)qr_foreground_color qr_background_color:(UIColor * _Nullable)qr_background_color icons_foreground_color:(UIColor * _Nullable)icons_foreground_color icons_background_color:(UIColor * _Nullable)icons_background_color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIImage;
@class NSString;
@class NSBundle;

/// Meta information of images for sdk consent action
SWIFT_CLASS("_TtC6brdsdk17ConsentActionInfo")
@interface ConsentActionInfo : NSObject
/// Image for button’s background. If nil button’s background color will be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable backgroundImage;
/// Image for button’s title. If nil button’s title will be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable textImage;
/// Background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Color of text.
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates meta structure for a consent button with created images and colors.
/// \param backgroundImage Image for button’s background. If nil button’s background color will be used.
///
/// \param textImage Image for button’s title. If nil button’s title will be used.
///
/// \param backgroundColor Background color.
///
/// \param textColor Button’s text color.
///
- (nonnull instancetype)initWithBackgroundImage:(UIImage * _Nullable)backgroundImage textImage:(UIImage * _Nullable)textImage backgroundColor:(UIColor * _Nullable)backgroundColor textColor:(UIColor * _Nullable)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates meta structure for a consent button by using image names in bundle assets and nil colors.
/// \param backgroundName Name of background image in xcassets. The image is for button’s background.
/// If nil button’s background color will be used
///
/// \param textName Name of text image in xcassets. The image for button’s title. If nil button’s title will be used.
///
/// \param bundle Bundle where xsassets placed
///
- (nonnull instancetype)initWithBackgroundName:(NSString * _Nullable)backgroundName textName:(NSString * _Nullable)textName in:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Meta information about a consent screen background image
SWIFT_CLASS("_TtC6brdsdk22ConsentBackgroundImage")
@interface ConsentBackgroundImage : NSObject
/// Image for portrait orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull portrait;
/// Image for landscape orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull landscape;
/// Scale mode for image view
@property (nonatomic, readonly) UIViewContentMode scaleMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates meta structure with passed params
/// \param portrait Image for portrait orientation
///
/// \param landscape Image for landscape orientation. If nil, portrait will be used
///
/// \param scaleMode Scale mode for image view. Desirable to use fit or fill values
///
- (nonnull instancetype)initWithPortrait:(UIImage * _Nonnull)portrait landscape:(UIImage * _Nullable)landscape scaleMode:(UIViewContentMode)scaleMode OBJC_DESIGNATED_INITIALIZER;
/// Creates meta structure by using image names in bundle assets
/// \param portraitName Name of portrait image in xcassets
///
/// \param landscapeName Name of landscape image in xcassets. If nil, portrait will be used
///
/// \param scaleMode Scale mode for image view. Desirable to use fit or fill values
///
/// \param bundle Bundle where xsassets placed
///
- (nullable instancetype)initWithPortraitName:(NSString * _Nonnull)portraitName landscapeName:(NSString * _Nullable)landscapeName scaleMode:(UIViewContentMode)scaleMode in:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIFont;

/// Contains fonts that overrides default fonts of the SDK’s consent screen.
SWIFT_CLASS("_TtC6brdsdk16ConsentFontsInfo")
@interface ConsentFontsInfo : NSObject
/// Empty instance with nil font values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConsentFontsInfo * _Nonnull empty;)
+ (ConsentFontsInfo * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitleText:(UIFont * _Nullable)titleText mainText:(UIFont * _Nullable)mainText licenseText:(UIFont * _Nullable)licenseText iconsText:(UIFont * _Nullable)iconsText buttonsText:(UIFont * _Nullable)buttonsText OBJC_DESIGNATED_INITIALIZER;
/// Overrides font for the consent’s title by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setTitleTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s main text by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setMainTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s license (EULA, Privacy Politics) text by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setLicenseTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s icons texts by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setIconsTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
/// Overrides font for the consent’s buttons by its registered name in the system or a path to a font file.
/// note:
/// If a font cannot be created by passed name or path, it will set nil.
/// warning:
/// SDK has limitations for font sizes.
/// \param nameOrPath Registered font name or a path to font’s file.
///
/// \param size Size of new font.
///
///
/// returns:
/// Updated source instance.
- (nonnull instancetype)setButtonsTextWithNameOrPath:(NSString * _Nonnull)nameOrPath size:(CGFloat)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The presentation style for SDK’s consent screen.
/// Presentation style defines how the system presents a modal view controller.
/// The system uses this value only in regular-width size classes. In compact-width size classes, some styles take on the behavior of other styles.
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIConsentPresentationStyle, "ConsentPresentationStyle", open) {
/// Default SDK’s consent screen presentation style for current device and platform.
  BrightAPIConsentPresentationStyleDefault = 0,
/// A presentation style that partially covers the underlying content.
  BrightAPIConsentPresentationStylePageSheet = 1,
/// A presentation style that displays the content centered in the screen.
  BrightAPIConsentPresentationStyleFormSheet = 2,
/// A presentation style in which the presented view covers the screen.
/// The views belonging to the presenting view controller are removed after the presentation completes.
  BrightAPIConsentPresentationStyleFullScreen = 100,
/// A view presentation style in which the presented view covers the screen.
/// The views beneath the presented content are not removed from the view hierarchy when the presentation finishes.
/// So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.
  BrightAPIConsentPresentationStyleOverFullScreen = 101,
};








enum BrightAPIAuthorizationStatus : NSInteger;

SWIFT_EXTERN enum BrightAPIAuthorizationStatus brdSDK_AuthorizeDevice(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN enum BrightAPIChoice brdSDK_CurrentChoice(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN NSInteger brdSDK_ExternalOptIn(enum BrightAPIChoiceTriggerType trigger) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN char const * _Nullable brdSDK_GetUUID(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_NotifyConsentShown(void) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_OptOut(enum BrightAPIChoiceTriggerType trigger) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnChoiceChangeCallback(void (* _Nonnull callback)(enum BrightAPIChoice)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnConsentClosedCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnConsentPresentedCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN void brdSDK_SetOnReadyCallback(void (* _Nonnull callback)(void)) SWIFT_NOEXCEPT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN BOOL brdSDK_ShowConsent(char const * _Nullable _benefit, char const * _Nullable _agreeTitle, char const * _Nullable _disagreeTitle, char const * _Nullable _language, enum BrightAPIConsentPresentationStyle presentationStyle) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN NSInteger brdSDK_StaticInit(char const * _Nullable benefit, char const * _Nullable agreeTitle, char const * _Nullable disagreeTitle, char const * _Nullable optInInstructions, char const * _Nullable appIcon, char const * _Nullable language, BOOL skipConsent, _ConsentColors const * _Nullable consentColors, _ConsentImageMeta const * _Nullable backgroundImage, _ConsentActionMeta const * _Nullable optInInfo, _ConsentActionMeta const * _Nullable optOutInfo, _ConsentFontsInfo const * _Nullable fonts, char const * _Nullable campaign) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);


SWIFT_EXTERN char const * _Nonnull brdSDK_Version(void) SWIFT_NOEXCEPT SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);

@class NSLocale;
@class NSURL;

SWIFT_CLASS("_TtC6brdsdk7brd_api") SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api : NSObject
/// Handler when consent did present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onConsentPresented)(void);)
+ (void (^ _Nullable)(void))onConsentPresented SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnConsentPresented:(void (^ _Nullable)(void))value;
/// Handler when consent was dismissed by close button or agree/disagree buttons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onConsentClosed)(void);)
+ (void (^ _Nullable)(void))onConsentClosed SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnConsentClosed:(void (^ _Nullable)(void))value;
/// Handler for the event when SDK is configured and ready.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onSDKReady)(void);)
+ (void (^ _Nullable)(void))onSDKReady SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnSDKReady:(void (^ _Nullable)(void))value;
/// Handler for the choice chaning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable onChoiceChange)(enum BrightAPIChoice);)
+ (void (^ _Nullable)(enum BrightAPIChoice))onChoiceChange SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnChoiceChange:(void (^ _Nullable)(enum BrightAPIChoice))value;
/// Language of the consent screen.
/// Set this property to an appropriate locale with language identifier for consent screen or nil if need default language.
/// seealso:
/// <a href="doc:brd_api/supportedLanguages()">doc:brd_api/supportedLanguages()</a>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSLocale * _Nullable currentLanguage;)
+ (NSLocale * _Nullable)currentLanguage SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentLanguage:(NSLocale * _Nullable)value;
/// Returns current user’s consent status.
/// seealso:
/// <code>Choice</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BrightAPIChoice currentChoice;)
+ (enum BrightAPIChoice)currentChoice SWIFT_WARN_UNUSED_RESULT;
/// BrightSDK version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Retrieves current sdk uuid value.
///
/// returns:
/// Nil in case sdk is not initialized, or stored uuid value
+ (NSString * _Nullable)get_uuid SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of available languages in SDK.
+ (NSArray<NSLocale *> * _Nonnull)supportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Initializes the SDK.
/// Should be called at the app init. All other methods will be accessible after successful initialization
/// \param benefit the text which is used in the consent screen as a prefix: “<benefit>,
/// allow Bright Data to use your device’s free resources and IP address to download…”.
/// If the parameter is not provided, then “To support <app_name>” is used by default,
/// i.g. “To support My Sample App, allow Bright Data to use your device’s free resources
/// and IP address to download…”
///
/// \param agree_btn consent screen “agree” button text. Default value: “I Agree”.
///
/// \param disagree_btn consent screen “disagree” button text. Default value: “I Disagree”.
///
/// \param language language of SDK’s consent screen. To get the list of supported by SDK language locales
/// use <a href="doc:brd_api/supportedLanguages()">doc:brd_api/supportedLanguages()</a> method.
///
/// \param colors the color settings for the text, buttons and background
///
/// \param skip_consent can be passed to skip showing the consent screen on the initialization of the API.
/// The consent screen can be shown later with the show_consent method.
///
/// \param background_image set of background images of the consent screen
///
/// \param opt_in_info Meta information for the opt-in button
///
/// \param opt_out_info Meta information for the opt-out button
///
/// \param opt_out_instructions Instructions of how to opt-out
///
/// \param appicon Icon image on the consent screen
///
/// \param fonts Details for fonts of the consent screen
///
/// \param campaign Name of campaign
///
- (nullable instancetype)initWithBenefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn opt_out_instructions:(NSString * _Nullable)opt_out_instructions appicon:(UIImage * _Nullable)appicon cwd:(NSURL * _Nullable)_cwd sys_app_id:(NSString * _Nullable)sys_app_id language:(NSString * _Nullable)language colors:(ColorSettings * _Nullable)colors background_image:(ConsentBackgroundImage * _Nullable)background_image opt_in_info:(ConsentActionInfo * _Nullable)opt_in_info opt_out_info:(ConsentActionInfo * _Nullable)opt_out_info fonts:(ConsentFontsInfo * _Nullable)fonts skip_consent:(BOOL)skip_consent campaign:(NSString * _Nullable)campaign error:(NSError * _Nullable * _Nullable)error;
/// Disables SDK.
/// \param triggerType Place type from where it called. Default value is <code>ChoiceTriggerType/consent</code>.
///
+ (void)optOutFrom:(enum BrightAPIChoiceTriggerType)triggerType;
/// Indicates a user has agreed with consent conditions and starts SDK processes.
/// This method checks authorization status to determine the possibility of the operation.
/// \param triggerType Place type from where it called. Default value is <code>ChoiceTriggerType/consent</code>.
///
///
/// throws:
/// <a href="doc:brd_api/api_error">doc:brd_api/api_error</a>
+ (BOOL)externalOptInFrom:(enum BrightAPIChoiceTriggerType)triggerType error:(NSError * _Nullable * _Nullable)error;
/// Triggers post actions when custom consent screen was shown.
/// When you implement a custom consent screen you must call this method when the screen is presented in, for example, <em>viewDidAppear</em>.
+ (void)notifyConsentShown;
/// Checks availability of running sdk on the device. It allows you to determine what you are able to do with sdk.
/// You should check the status and decide your reaction on it before showing your custom consent screen.
/// Example:
/// \code
/// let api = try brd_api(...)
/// ...
/// let authStatus = brd_api.authorizeDevice()
/// switch authStatus {
///     case .sdkNotInitialized: break // you have to initialize sdk before
///     case .parentControlEnabled: break // you cannot use sdk when parent control on a device is enabled
///     case .authorized:
///         if Feature.customConsent {
///             // show your own consent screen
///         } else {
///             // show sdk's consent screen
///         }
/// }
///
/// \endcodeattention:
/// This method is required to call when you attempt to use your own consent screen. In the other case it’s optional.
///
/// returns:
/// Authorization status
+ (enum BrightAPIAuthorizationStatus)authorizeDevice SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Result of checks of availability of using SDK
typedef SWIFT_ENUM_NAMED(NSInteger, BrightAPIAuthorizationStatus, "AuthorizationStatus", open) {
/// Indicates that you are able to use SDK in both cases: either with SDK’s consent screen or with your own one
  BrightAPIAuthorizationStatusAuthorized = 0,
/// Indicates that SDK is not initialized
  BrightAPIAuthorizationStatusSdkNotInitialized = -1,
/// Indicates that parent control is enabled and you don’t have to use SDK
  BrightAPIAuthorizationStatusParentControlEnabled = -2,
};
static NSString * _Nonnull const BrightAPIAuthorizationStatusDomain = @"brdsdk.brd_api.AuthorizationStatus";




SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api (SWIFT_EXTENSION(brdsdk))
- (nullable instancetype)initWithBenefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn opt_out_instructions:(NSString * _Nullable)opt_out_instructions appicon:(UIImage * _Nullable)appicon cwd:(NSURL * _Nullable)_cwd sys_app_id:(NSString * _Nullable)sys_app_id language:(NSString * _Nullable)language colors:(ColorSettings * _Nullable)colors background_image:(ConsentBackgroundImage * _Nullable)background_image opt_in_info:(ConsentActionInfo * _Nullable)opt_in_info opt_out_info:(ConsentActionInfo * _Nullable)opt_out_info fonts:(ConsentFontsInfo * _Nullable)fonts skip_consent:(BOOL)skip_consent campaign:(NSString * _Nullable)campaign error:(NSError * _Nullable * _Nullable)error on_choice_change:(void (^ _Nullable)(NSInteger))on_choice_change SWIFT_DEPRECATED_MSG("Use other constructor without choice-change callback.");
+ (void)clear_choice SWIFT_DEPRECATED_MSG("This method will be removed in a future version.");
@end

@class UIViewController;

SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface brd_api (SWIFT_EXTENSION(brdsdk))
/// Shows the consent on the user’s action.
/// This can be used when a user tries to close an ad or clicks the checkbox in Settings screen
/// to activate Bright SDK. Result of consent will be notified via <code>brd_api/onChoiceChange</code>
/// callback from sdk initializer.
///
/// returns:
/// true if  sdk is initialized and child control disabled
+ (BOOL)show_consent:(UIViewController * _Nullable)parent benefit:(NSString * _Nullable)benefit agree_btn:(NSString * _Nullable)agree_btn disagree_btn:(NSString * _Nullable)disagree_btn language:(NSString * _Nullable)language presentationStyle:(enum BrightAPIConsentPresentationStyle)presentationStyle;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
